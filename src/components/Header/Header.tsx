import { useLang } from "../../hooks/useLang";
import SelectApartmentBtn from "../Buttons/SelectApartmentBtn";
import styles from "./Header.module.css";
import HeaderBurger from "./HeaderBurger";
import { LanguageSelect } from "../LanguageSelect/LanguageSelect";
import { useEffect, useRef, useState } from "react";

import "./style.css";
import Navigation from "../Navigation/Navigation";

const Header = () => {
  const { setLang, lang } = useLang();
  useEffect(() => {
    const sections = document.querySelectorAll("section");
    const headerEl = document.querySelector("header");

    let currentVisibleSection: Element | null = null;

    const observer = new IntersectionObserver(
      (entries) => {
        // Находим первую пересекающуюся секцию
        const visibleEntry = entries.find((entry) => entry.isIntersecting);
        const firstSection = sections[0];

        if (visibleEntry) {
          const { target } = visibleEntry;

          // Логируем только если видимая секция изменилась
          if (target !== currentVisibleSection) {
            currentVisibleSection = target;

            const computedStyle = window.getComputedStyle(target);
            const bgColor = computedStyle.backgroundColor;
            console.log("Visible section background:", bgColor);
            if (bgColor.includes("28, 47, 36")) {
              headerEl?.style.setProperty("background-color", "#1C2F24");
            } else if (bgColor.includes("250, 247, 242")) {
              headerEl?.style.setProperty("background-color", "#FAF7F2");
            } else if (bgColor.includes("0, 0, 0") && bgColor.includes("0.2")) {
              headerEl?.style.setProperty("background-color", "#00000033");
            }
          }
        }
        entries.forEach(({ target, isIntersecting }) => {
          if (target === firstSection) {
            if (!isIntersecting) {
              headerEl?.classList.add("scrolled");
            } else {
              headerEl?.classList.remove("scrolled");
            }
          }
        });
      },
      { threshold: 0.9 }
    );

    sections.forEach((sec) => observer.observe(sec));
    return () => observer.disconnect();
  }, []);

  const languages = [
    { code: "en", label: "EN" },
    { code: "srb", label: "SRB" },
  ] as const;
  const isProduct: boolean = false;
  return (
    <>
      {isProduct ? (
        <header className={styles.maintanceHeader}>
          <img className={styles.logo} src="/logo.svg" alt="logo" />
          <div className={styles.langSwitcher_maintance}>
            {languages.map(({ code, label }) => (
              <button
                key={code}
                onClick={() => setLang(code)}
                className={lang === code ? styles.active : ""}
              >
                {label}
              </button>
            ))}
          </div>
        </header>
      ) : (
        <header className="mainHeader">
          <div className={styles.header__body}>
            <div className={styles.logo}>
              <svg
                width="138"
                height="62"
                viewBox="0 0 138 62"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M10.6189 45.1473C10.5258 44.3607 10.148 43.7501 9.4856 43.3154C8.82322 42.8807 8.01076 42.6634 7.04822 42.6634C6.34444 42.6634 5.72862 42.7772 5.20078 43.0049C4.67812 43.2326 4.2693 43.5457 3.97433 43.9442C3.68453 44.3426 3.53964 44.7954 3.53964 45.3026C3.53964 45.7269 3.64055 46.0917 3.84237 46.3971C4.04936 46.6972 4.31328 46.9482 4.63413 47.15C4.95497 47.3467 5.29134 47.5097 5.64324 47.639C5.99513 47.7632 6.31856 47.8642 6.61353 47.9418L8.2281 48.3765C8.64209 48.4851 9.10266 48.6352 9.6098 48.8267C10.1221 49.0182 10.6111 49.2795 11.0769 49.6107C11.5478 49.9367 11.9359 50.3559 12.2412 50.8682C12.5466 51.3805 12.6992 52.0093 12.6992 52.7544C12.6992 53.6135 12.4741 54.3897 12.0239 55.0831C11.5789 55.7766 10.9268 56.3277 10.0678 56.7365C9.21392 57.1453 8.17635 57.3498 6.95507 57.3498C5.81659 57.3498 4.83078 57.166 3.99762 56.7986C3.16963 56.4312 2.51759 55.9189 2.0415 55.2617C1.57058 54.6045 1.30408 53.8412 1.24198 52.9718H3.22914C3.28089 53.5721 3.48271 54.0689 3.83461 54.4622C4.19167 54.8503 4.64189 55.1401 5.18526 55.3315C5.7338 55.5178 6.32374 55.611 6.95507 55.611C7.68991 55.611 8.34971 55.492 8.93448 55.2539C9.51924 55.0107 9.98239 54.6743 10.3239 54.2448C10.6655 53.8101 10.8363 53.303 10.8363 52.7234C10.8363 52.1956 10.6888 51.766 10.3938 51.4348C10.0988 51.1036 9.71071 50.8346 9.22945 50.6276C8.74818 50.4206 8.2281 50.2394 7.66921 50.0842L5.7131 49.5253C4.47112 49.1682 3.48789 48.6585 2.7634 47.9961C2.03891 47.3337 1.67667 46.4669 1.67667 45.3957C1.67667 44.5056 1.9173 43.7294 2.39857 43.067C2.88501 42.3995 3.53705 41.882 4.35468 41.5145C5.17749 41.1419 6.09604 40.9557 7.11032 40.9557C8.13495 40.9557 9.04574 41.1394 9.84267 41.5068C10.6396 41.869 11.2709 42.3658 11.7367 42.9972C12.2076 43.6285 12.456 44.3452 12.4819 45.1473H10.6189ZM5.3405 36.3914L6.95507 38.5648L8.56965 36.3914H10.3084V36.5156L7.79341 39.7447H6.11674L3.60174 36.5156V36.3914H5.3405ZM29.2777 49.1217C29.2777 50.7983 28.9749 52.2473 28.3695 53.4686C27.764 54.6899 26.9334 55.6317 25.8778 56.2941C24.8221 56.9565 23.6163 57.2877 22.2605 57.2877C20.9047 57.2877 19.6989 56.9565 18.6432 56.2941C17.5876 55.6317 16.757 54.6899 16.1515 53.4686C15.5461 52.2473 15.2433 50.7983 15.2433 49.1217C15.2433 47.445 15.5461 45.996 16.1515 44.7747C16.757 43.5535 17.5876 42.6116 18.6432 41.9492C19.6989 41.2868 20.9047 40.9557 22.2605 40.9557C23.6163 40.9557 24.8221 41.2868 25.8778 41.9492C26.9334 42.6116 27.764 43.5535 28.3695 44.7747C28.9749 45.996 29.2777 47.445 29.2777 49.1217ZM27.4147 49.1217C27.4147 47.7451 27.1844 46.5834 26.7239 45.6364C26.2685 44.6893 25.6501 43.9726 24.8687 43.4862C24.0924 42.9997 23.223 42.7565 22.2605 42.7565C21.298 42.7565 20.426 42.9997 19.6446 43.4862C18.8684 43.9726 18.25 44.6893 17.7894 45.6364C17.334 46.5834 17.1063 47.7451 17.1063 49.1217C17.1063 50.4982 17.334 51.6599 17.7894 52.607C18.25 53.554 18.8684 54.2707 19.6446 54.7571C20.426 55.2436 21.298 55.4868 22.2605 55.4868C23.223 55.4868 24.0924 55.2436 24.8687 54.7571C25.6501 54.2707 26.2685 53.554 26.7239 52.607C27.1844 51.6599 27.4147 50.4982 27.4147 49.1217ZM32.5146 57.0703V41.173H37.8861C39.1333 41.173 40.1527 41.3981 40.9445 41.8483C41.7414 42.2934 42.3314 42.8962 42.7143 43.657C43.0973 44.4177 43.2887 45.2664 43.2887 46.203C43.2887 47.1397 43.0973 47.9909 42.7143 48.7568C42.3366 49.5227 41.7518 50.1334 40.96 50.5887C40.1683 51.039 39.154 51.2641 37.9172 51.2641H34.0671V49.5563H37.8551C38.7089 49.5563 39.3946 49.4089 39.9121 49.1139C40.4296 48.8189 40.8048 48.4205 41.0377 47.9185C41.2757 47.4113 41.3947 46.8395 41.3947 46.203C41.3947 45.5665 41.2757 44.9973 41.0377 44.4953C40.8048 43.9933 40.427 43.6 39.9044 43.3154C39.3817 43.0256 38.6882 42.8807 37.824 42.8807H34.4397V57.0703H32.5146ZM46.3898 57.0703V41.173H55.9841V42.8807H48.3149V48.2523H55.4873V49.96H48.3149V55.3626H56.1083V57.0703H46.3898ZM72.0599 41.173V57.0703H70.197L61.5342 44.5884H61.3789V57.0703H59.4539V41.173H61.3168L70.0107 53.6859H70.1659V41.173H72.0599ZM82.1435 57.0703V40.4815H87.7487C89.0501 40.4815 90.1139 40.7164 90.9401 41.1862C91.7717 41.6506 92.3873 42.2797 92.7869 43.0735C93.1865 43.8673 93.3863 44.7529 93.3863 45.7303C93.3863 46.7077 93.1865 47.596 92.7869 48.3952C92.3927 49.1944 91.7825 49.8316 90.9563 50.3068C90.1301 50.7766 89.0717 51.0115 87.7811 51.0115H83.7635V49.2295H87.7163C88.6073 49.2295 89.3228 49.0756 89.8628 48.7678C90.4028 48.46 90.7943 48.0442 91.0373 47.5204C91.2857 46.9912 91.4099 46.3945 91.4099 45.7303C91.4099 45.0661 91.2857 44.4721 91.0373 43.9483C90.7943 43.4245 90.4001 43.0141 89.8547 42.7171C89.3093 42.4147 88.5857 42.2635 87.6839 42.2635H84.1523V57.0703H82.1435ZM95.6098 57.0703H93.5038L99.595 40.4815H101.669L107.76 57.0703H105.654L100.697 43.1059H100.567L95.6098 57.0703ZM96.3874 50.5903H104.876V52.3723H96.3874V50.5903ZM110.344 57.0703V40.4815H115.949C117.245 40.4815 118.309 40.7029 119.14 41.1457C119.972 41.5831 120.588 42.1852 120.987 42.952C121.387 43.7188 121.587 44.5909 121.587 45.5683C121.587 46.5457 121.387 47.4124 120.987 48.1684C120.588 48.9244 119.975 49.5184 119.148 49.9504C118.322 50.377 117.266 50.5903 115.981 50.5903H111.445V48.7759H115.916C116.802 48.7759 117.515 48.6463 118.055 48.3871C118.6 48.1279 118.994 47.7607 119.238 47.2855C119.486 46.8049 119.61 46.2325 119.61 45.5683C119.61 44.9041 119.486 44.3236 119.238 43.8268C118.989 43.33 118.592 42.9466 118.047 42.6766C117.501 42.4012 116.78 42.2635 115.884 42.2635H112.352V57.0703H110.344ZM118.152 49.6183L122.235 57.0703H119.902L115.884 49.6183H118.152ZM124.934 57.0703V40.4815H126.943V48.7111H127.137L134.589 40.4815H137.213L130.247 47.9659L137.213 57.0703H134.783L129.016 49.3591L126.943 51.6919V57.0703H124.934Z"
                  fill="currentColor"
                />
                <path
                  d="M63.9036 0H56V31.2457H63.9036V0Z"
                  fill="currentColor"
                />
                <path
                  d="M78.0729 6.57812V14.8479H74.6328V31.2461H82.5364V6.57812H78.0729Z"
                  fill="currentColor"
                />
                <path
                  d="M68.757 14.8479H65.3169V31.2461H73.2205V6.57812H68.757V14.8479Z"
                  fill="currentColor"
                />
              </svg>
            </div>
            <Navigation
              items={[
                { label: "About project", targetId: "about-project" },
                { label: "Infrastructure", targetId: "infrastructure" },
                { label: "Advantages", targetId: "advantages" },
                { label: "Equipment", targetId: "equipment" },
                { label: "Contact", targetId: "contact" },
              ]}
            />

            <div className={styles.header_block}>
              <LanguageSelect />
              <SelectApartmentBtn />
              <HeaderBurger />
            </div>
          </div>
        </header>
      )}
    </>
  );
};

export default Header;
